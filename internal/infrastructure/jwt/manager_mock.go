// Code generated by mockery v2.36.0. DO NOT EDIT.

package jwt

import (
	gin "github.com/gin-gonic/gin"
	golang_jwtjwt "github.com/golang-jwt/jwt"

	mock "github.com/stretchr/testify/mock"
)

// MockManager is an autogenerated mock type for the Manager type
type MockManager struct {
	mock.Mock
}

type MockManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockManager) EXPECT() *MockManager_Expecter {
	return &MockManager_Expecter{mock: &_m.Mock}
}

// FromMapClaims provides a mock function with given fields: userClaims
func (_m *MockManager) FromMapClaims(userClaims golang_jwtjwt.MapClaims) (*Claims, error) {
	ret := _m.Called(userClaims)

	var r0 *Claims
	var r1 error
	if rf, ok := ret.Get(0).(func(golang_jwtjwt.MapClaims) (*Claims, error)); ok {
		return rf(userClaims)
	}
	if rf, ok := ret.Get(0).(func(golang_jwtjwt.MapClaims) *Claims); ok {
		r0 = rf(userClaims)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Claims)
		}
	}

	if rf, ok := ret.Get(1).(func(golang_jwtjwt.MapClaims) error); ok {
		r1 = rf(userClaims)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockManager_FromMapClaims_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FromMapClaims'
type MockManager_FromMapClaims_Call struct {
	*mock.Call
}

// FromMapClaims is a helper method to define mock.On call
//   - userClaims golang_jwtjwt.MapClaims
func (_e *MockManager_Expecter) FromMapClaims(userClaims interface{}) *MockManager_FromMapClaims_Call {
	return &MockManager_FromMapClaims_Call{Call: _e.mock.On("FromMapClaims", userClaims)}
}

func (_c *MockManager_FromMapClaims_Call) Run(run func(userClaims golang_jwtjwt.MapClaims)) *MockManager_FromMapClaims_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(golang_jwtjwt.MapClaims))
	})
	return _c
}

func (_c *MockManager_FromMapClaims_Call) Return(_a0 *Claims, _a1 error) *MockManager_FromMapClaims_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManager_FromMapClaims_Call) RunAndReturn(run func(golang_jwtjwt.MapClaims) (*Claims, error)) *MockManager_FromMapClaims_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateToken provides a mock function with given fields: userID, username
func (_m *MockManager) GenerateToken(userID uint, username string) (string, error) {
	ret := _m.Called(userID, username)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, string) (string, error)); ok {
		return rf(userID, username)
	}
	if rf, ok := ret.Get(0).(func(uint, string) string); ok {
		r0 = rf(userID, username)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(uint, string) error); ok {
		r1 = rf(userID, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockManager_GenerateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateToken'
type MockManager_GenerateToken_Call struct {
	*mock.Call
}

// GenerateToken is a helper method to define mock.On call
//   - userID uint
//   - username string
func (_e *MockManager_Expecter) GenerateToken(userID interface{}, username interface{}) *MockManager_GenerateToken_Call {
	return &MockManager_GenerateToken_Call{Call: _e.mock.On("GenerateToken", userID, username)}
}

func (_c *MockManager_GenerateToken_Call) Run(run func(userID uint, username string)) *MockManager_GenerateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(string))
	})
	return _c
}

func (_c *MockManager_GenerateToken_Call) Return(_a0 string, _a1 error) *MockManager_GenerateToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManager_GenerateToken_Call) RunAndReturn(run func(uint, string) (string, error)) *MockManager_GenerateToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetClaims provides a mock function with given fields: c
func (_m *MockManager) GetClaims(c *gin.Context) (*Claims, error) {
	ret := _m.Called(c)

	var r0 *Claims
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context) (*Claims, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context) *Claims); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Claims)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockManager_GetClaims_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClaims'
type MockManager_GetClaims_Call struct {
	*mock.Call
}

// GetClaims is a helper method to define mock.On call
//   - c *gin.Context
func (_e *MockManager_Expecter) GetClaims(c interface{}) *MockManager_GetClaims_Call {
	return &MockManager_GetClaims_Call{Call: _e.mock.On("GetClaims", c)}
}

func (_c *MockManager_GetClaims_Call) Run(run func(c *gin.Context)) *MockManager_GetClaims_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *MockManager_GetClaims_Call) Return(_a0 *Claims, _a1 error) *MockManager_GetClaims_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManager_GetClaims_Call) RunAndReturn(run func(*gin.Context) (*Claims, error)) *MockManager_GetClaims_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateToken provides a mock function with given fields: encodedToken
func (_m *MockManager) ValidateToken(encodedToken string) (*golang_jwtjwt.Token, error) {
	ret := _m.Called(encodedToken)

	var r0 *golang_jwtjwt.Token
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*golang_jwtjwt.Token, error)); ok {
		return rf(encodedToken)
	}
	if rf, ok := ret.Get(0).(func(string) *golang_jwtjwt.Token); ok {
		r0 = rf(encodedToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*golang_jwtjwt.Token)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(encodedToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockManager_ValidateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateToken'
type MockManager_ValidateToken_Call struct {
	*mock.Call
}

// ValidateToken is a helper method to define mock.On call
//   - encodedToken string
func (_e *MockManager_Expecter) ValidateToken(encodedToken interface{}) *MockManager_ValidateToken_Call {
	return &MockManager_ValidateToken_Call{Call: _e.mock.On("ValidateToken", encodedToken)}
}

func (_c *MockManager_ValidateToken_Call) Run(run func(encodedToken string)) *MockManager_ValidateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockManager_ValidateToken_Call) Return(_a0 *golang_jwtjwt.Token, _a1 error) *MockManager_ValidateToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManager_ValidateToken_Call) RunAndReturn(run func(string) (*golang_jwtjwt.Token, error)) *MockManager_ValidateToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockManager creates a new instance of MockManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockManager {
	mock := &MockManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
